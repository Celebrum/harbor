#!/bin/bash
set -e

# If compiling source code this dir is harbor's make dir.
# If installing harbor via package, this dir is harbor's root dir.
if [[ -n "$HARBOR_BUNDLE_DIR" ]]; then
    harbor_prepare_path=$HARBOR_BUNDLE_DIR
else
    harbor_prepare_path="$( cd "$(dirname "$0")" ; pwd -P )"
fi
echo "prepare base dir is set to ${harbor_prepare_path}"

# Check if running in WSL and adjust path if needed
if [[ "$(uname -r)" == *Microsoft* || "$(uname -r)" == *microsoft* ]]; then
    # Check if we're in the Windows mount path structure
    if [[ "$harbor_prepare_path" == /mnt/* ]]; then
        # If we're in WSL, try to look for the harbor.yml file one level up
        echo "WSL environment detected, checking parent directory for harbor.yml"
        parent_dir="$(dirname "$harbor_prepare_path")"
        if [ -f "${parent_dir}/harbor.yml" ]; then
            echo "Found harbor.yml in parent directory"
            cp ${parent_dir}/harbor.yml ${harbor_prepare_path}/
        fi
    fi
fi

# Check for Harpoon configuration
if [ -f "${harbor_prepare_path}/harpoon.yml" ] || [ -f "${harbor_prepare_path}/../harpoon.yml" ]; then
    echo "Harpoon configuration detected"
    use_harpoon=true
    
    # Copy from parent directory if needed
    if [ ! -f "${harbor_prepare_path}/harpoon.yml" ] && [ -f "${harbor_prepare_path}/../harpoon.yml" ]; then
        cp ${harbor_prepare_path}/../harpoon.yml ${harbor_prepare_path}/
    fi
else
    use_harpoon=false
fi

# Clean up input dir
rm -rf ${harbor_prepare_path}/input
# Create input dirs
mkdir -p ${harbor_prepare_path}/input
input_dir=${harbor_prepare_path}/input

# Copy configuration files to input dir
if [[ ! "$1" =~ ^\-\- ]] && [ -f "$1" ]
then
    cp $1 $input_dir/harbor.yml
    shift
else
    if [ -f "${harbor_prepare_path}/harbor.yml" ];then
        cp ${harbor_prepare_path}/harbor.yml $input_dir/harbor.yml
    else
        # If harbor.yml doesn't exist, copy from template if available
        if [ -f "${harbor_prepare_path}/harbor.yml.tmpl" ]; then
            echo "Creating harbor.yml from template"
            cp ${harbor_prepare_path}/harbor.yml.tmpl ${harbor_prepare_path}/harbor.yml
            cp ${harbor_prepare_path}/harbor.yml $input_dir/harbor.yml
        else
            echo "no config file: ${harbor_prepare_path}/harbor.yml"
            echo "Please create a harbor.yml file based on harbor.yml.tmpl before running prepare"
            exit 1
        fi
    fi
fi

# Copy Harpoon config if exists
if [ "$use_harpoon" = true ] && [ -f "${harbor_prepare_path}/harpoon.yml" ]; then
    echo "Copying Harpoon configuration"
    cp ${harbor_prepare_path}/harpoon.yml $input_dir/harpoon.yml
fi

# Continue only if we have a valid harbor.yml
if [ ! -f "${input_dir}/harbor.yml" ]; then
    echo "harbor.yml not found in input directory, exiting"
    exit 1
fi

data_path=$(grep '^[^#]*data_volume:' $input_dir/harbor.yml | awk '{print $NF}')

# If previous secretkeys exist, move it to new location
previous_secretkey_path=/data/secretkey
previous_defaultalias_path=/data/defaultalias

if [ -f $previous_secretkey_path ]; then
    mkdir -p $data_path/secret/keys
    mv $previous_secretkey_path $data_path/secret/keys
fi
if [ -f $previous_defaultalias_path ]; then
    mkdir -p $data_path/secret/keys
    mv $previous_defaultalias_path $data_path/secret/keys
fi

# Create secret dir
secret_dir=${data_path}/secret
config_dir=$harbor_prepare_path/common/config

# Set the prepare base dir, for mac, it should be $HOME, for linux, it should be /
# The certificate and the data directory in harbor.yaml should be sub directories of $HOME when installing Harbor in MacOS
prepare_base_dir=/
if [ "$(uname)" == "Darwin" ]; then
    prepare_base_dir=$HOME
fi

# Build extra arguments - include Harpoon if detected
extra_args=""
if [ "$use_harpoon" = true ]; then
    echo "Enabling Harpoon integration"
    # Check if --with-trivy is supported as a proxy for Harpoon support
    if docker run --rm goharbor/prepare:dev prepare --help | grep -q "\--with-trivy"; then
        extra_args="--with-trivy"
    fi
fi

# Run prepare script
echo "Running prepare script with args: $@ $extra_args"
docker run --rm -v $input_dir:/input \
                -v $data_path:/data \
                -v $harbor_prepare_path:/compose_location \
                -v $config_dir:/config \
                -v ${prepare_base_dir}:/hostfs${prepare_base_dir} \
                --privileged \
                goharbor/prepare:dev prepare $@ $extra_args

echo "Clean up the input dir"
# Clean up input dir
rm -rf ${harbor_prepare_path}/input
